name: CI-CD

# Dispara o workflow em push na branch "main", merge na branch "main" ou manualmente
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # Job CI: Compilação e testes do projeto
  CI:
    runs-on: ubuntu-latest

    # Define a estratégia de matriz para o job
    strategy:
      matrix:
        # Define a versão do Node.js a ser utilizada
        node-version: [18.x]

    steps:
      # Passo 1: Faz o checkout do código-fonte do repositório
      - name: Checkout do código-fonte do repositório
        uses: actions/checkout@v4

      # Passo 2: Configuração do ambiente Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # Usa cache npm para acelerar a instalação de dependências
          cache: 'npm'

      # gambiarra apara corrigir problema de compatibilidade
      - name: Force resolutions
        run: npx npm-force-resolutions

      - name: atualizar dependencias
        run: npm update
        
      # Passo 3: Instalação das dependências do projeto
      - name: Instalar dependências do projeto
        run: npm install

      # Passo 4: Instalação do Angular CLI globalmente
      - name: Install Angular CLI
        run: npm install -g @angular/cli

      # Passo 5: Construção do projeto Angular usando a configuração de produção
      - name: Construir o projeto Angular
        run: ng build --configuration production

      # Passo 6: Execução de testes unitários
      - name: Executar testes unitários
        run: ng test

      # Passo 7: Autenticação no Docker Hub
      - name: Autenticação no Docker Hub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Passo 8: Build e Push da Imagem no Docker Hub
      - name: Build e Push da Imagem no Docker Hub
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: |
            ricardosantosf/boratrocar-frontend:v1.${{ github.run_number }}
            ricardosantosf/boratrocar-frontend:latest

  # Job zap_scan: Análise de segurança ZAP Scan
  zap_scan:
    runs-on: ubuntu-latest
    name: ZAP Scan da aplicação
    steps:
      # Passo 1: Faz o checkout do código-fonte do repositório
      - name: Checkout do código-fonte do repositório
        uses: actions/checkout@v4
        with:
          ref: main

      # Passo 2: Executa a análise de segurança ZAP Scan
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          token: ${{ secrets.TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://boratrocar.net/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false
          artifact_name: 'zap_scan_report'

  # Job CD: Implantação do projeto
  CD:
    runs-on: ubuntu-latest
    needs: [CI]

    steps:
      # Passo 1: Acessar a VPS via SSH e faz o deploy da aplicação
      - name: Acessar a VPS via SSH e faz o deploy da aplicação
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/Docker
            docker-compose pull frontend
            docker-compose up -d frontend
            docker image prune -f
